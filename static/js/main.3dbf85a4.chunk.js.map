{"version":3,"sources":["components/TaskList.jsx","components/TaskContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["taskContainer","display","alignItems","justifyContent","marginTop","marginBot","taskSpace","marginLeft","marginRight","TaskList","Tasks","RemoveTask","map","task","index","style","onClick","TaskListContainer","useState","taskData","setTasks","setTask","addTask","document","getElementById","value","length","alert","String","onSubmit","e","preventDefault","id","placeholder","type","onChange","target","trim","onKeyPress","key","splice","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0OAGMA,EAAgB,CAClBC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,UAAW,MACXC,UAAW,OAGTC,EAAY,CACdC,WAAY,MACZC,YAAa,OAGF,SAASC,EAAT,GAAwC,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,WAErC,OAAID,EAEI,8BACKA,EAAME,KAAI,SAACC,EAAMC,GAAP,OACP,sBAAiBC,MAAOf,EAAxB,UACI,qBAAKe,MAAOT,EAAZ,SACKO,IAEL,cAAC,IAAD,CAAsBG,QAAS,kBAAIL,EAAWG,QAJxCA,QAWlB,wBC7BG,SAASG,IAEpB,MAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOL,EAAP,KAAaQ,EAAb,KAEMC,EAAU,WACZC,SAASC,eAAe,kBAAkBC,MAAQ,GAC9CZ,EAAKa,OAAS,EACdC,MAAM,mBAENP,GAAS,SAAAD,GAAQ,4BAAQA,GAAR,CAAkBS,OAAOf,QAC1CQ,EAAQ,MA2BhB,OACI,sBAAKN,MALQ,CACbX,UAAW,QAIX,UACI,sBAAMyB,SAfQ,SAAAC,GAClBA,EAAEC,kBAcE,SACI,gCACI,uBACIC,GAAG,iBACHC,YAAY,UACZC,KAAK,OACLC,SA/BD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClBf,EAAQO,OAAOQ,EAAOX,MAAMY,UA+BZC,WA5BD,SAAC,GACJ,UADgB,EAAVC,KAEhBjB,OA4BU,wBAAQY,KAAK,SAASlB,QAASM,EAA/B,2BAKR,cAACb,EAAD,CAAUC,MAAOS,EAAUR,WAzBhB,SAACG,GAChBK,EAASqB,OAAO1B,EAAO,GACvBM,EAAS,YAAID,UCxBNsB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASC,eAAe,SAM1BmB,M","file":"static/js/main.3dbf85a4.chunk.js","sourcesContent":["import React from 'react'\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\n\nconst taskContainer = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: '5px',\n    marginBot: '5px'\n}\n\nconst taskSpace = {\n    marginLeft: '5px',\n    marginRight: '5px'\n}\n\nexport default function TaskList({Tasks, RemoveTask}) {\n\n    if (Tasks) {\n        return (\n            <div>                \n                {Tasks.map((task, index) => (\n                    <div key={index} style={taskContainer}>\n                        <div style={taskSpace}>\n                            {task}\n                        </div> \n                        <AiOutlineCloseCircle onClick={()=>RemoveTask(index)}/>\n                    </div>\n                ))}\n            </div>\n        )\n    } else {\n        return (\n            <div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport TaskList from './TaskList'\nimport { useState } from 'react'\n\nexport default function TaskListContainer() {\n\n    const [taskData, setTasks] = useState([])\n    const [task, setTask] = useState('')\n\n    const addTask = () => { \n        document.getElementById('taskInputField').value = ''\n        if (task.length < 1){\n            alert(\"Task is empty!\")\n        }else{\n            setTasks(taskData => [...taskData, String(task)])\n            setTask('')\n        }\n    }\n\n    const updateTask = ({ target }) => {\n        setTask(String(target.value.trim()))\n    }\n\n    const keyPressed = ({ key }) => {\n        if (key === \"Enter\") {\n          addTask()\n        }\n    }\n\n    const submitHandler = e => {\n        e.preventDefault()\n    }\n\n    const removeTask = (index) => {\n        taskData.splice(index, 1);\n        setTasks([...taskData])\n    }\n\n    const spaceing = {\n        marginTop: '10vh'\n    }\n\n    return (\n        <div style={spaceing}>\n            <form onSubmit={submitHandler}>\n                <div>\n                    <input\n                        id=\"taskInputField\"\n                        placeholder=\"Task...\"\n                        type=\"text\"\n                        onChange={updateTask}\n                        onKeyPress={keyPressed}\n                    />\n                    <button type=\"button\" onClick={addTask}>\n                        ADD TASK\n                    </button>\n                </div>\n            </form>            \n            <TaskList Tasks={taskData} RemoveTask={removeTask}/>\n        </div>\n    )\n}","import './App.css';\nimport TaskContainer from './components/TaskContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <TaskContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}